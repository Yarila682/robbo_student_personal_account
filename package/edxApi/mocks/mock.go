// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_edx_api is a generated GoMock package.
package mock_edx_api

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEdxApi is a mock of EdxApi interface.
type MockEdxApi struct {
	ctrl     *gomock.Controller
	recorder *MockEdxApiMockRecorder
}

// MockEdxApiMockRecorder is the mock recorder for MockEdxApi.
type MockEdxApiMockRecorder struct {
	mock *MockEdxApi
}

// NewMockEdxApi creates a new mock instance.
func NewMockEdxApi(ctrl *gomock.Controller) *MockEdxApi {
	mock := &MockEdxApi{ctrl: ctrl}
	mock.recorder = &MockEdxApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEdxApi) EXPECT() *MockEdxApiMockRecorder {
	return m.recorder
}

// GetAllPublicCourses mocks base method.
func (m *MockEdxApi) GetAllPublicCourses(pageNumber int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPublicCourses", pageNumber)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPublicCourses indicates an expected call of GetAllPublicCourses.
func (mr *MockEdxApiMockRecorder) GetAllPublicCourses(pageNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPublicCourses", reflect.TypeOf((*MockEdxApi)(nil).GetAllPublicCourses), pageNumber)
}

// GetCourseContent mocks base method.
func (m *MockEdxApi) GetCourseContent(courseId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseContent", courseId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseContent indicates an expected call of GetCourseContent.
func (mr *MockEdxApiMockRecorder) GetCourseContent(courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseContent", reflect.TypeOf((*MockEdxApi)(nil).GetCourseContent), courseId)
}

// GetCoursesByUser mocks base method.
func (m *MockEdxApi) GetCoursesByUser() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoursesByUser")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoursesByUser indicates an expected call of GetCoursesByUser.
func (mr *MockEdxApiMockRecorder) GetCoursesByUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoursesByUser", reflect.TypeOf((*MockEdxApi)(nil).GetCoursesByUser))
}

// GetEnrollments mocks base method.
func (m *MockEdxApi) GetEnrollments(username string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnrollments", username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnrollments indicates an expected call of GetEnrollments.
func (mr *MockEdxApiMockRecorder) GetEnrollments(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnrollments", reflect.TypeOf((*MockEdxApi)(nil).GetEnrollments), username)
}

// GetUser mocks base method.
func (m *MockEdxApi) GetUser() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockEdxApiMockRecorder) GetUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockEdxApi)(nil).GetUser))
}

// Login mocks base method.
func (m *MockEdxApi) Login(email, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", email, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockEdxApiMockRecorder) Login(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockEdxApi)(nil).Login), email, password)
}

// PostEnrollment mocks base method.
func (m *MockEdxApi) PostEnrollment(message map[string]interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostEnrollment", message)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostEnrollment indicates an expected call of PostEnrollment.
func (mr *MockEdxApiMockRecorder) PostEnrollment(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostEnrollment", reflect.TypeOf((*MockEdxApi)(nil).PostEnrollment), message)
}

// PostRegistration mocks base method.
func (m *MockEdxApi) PostRegistration() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostRegistration")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostRegistration indicates an expected call of PostRegistration.
func (mr *MockEdxApiMockRecorder) PostRegistration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostRegistration", reflect.TypeOf((*MockEdxApi)(nil).PostRegistration))
}
