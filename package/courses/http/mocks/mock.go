// Code generated by MockGen. DO NOT EDIT.
// Source: delegate.go

// Package mock_courses is a generated GoMock package.
package mock_courses

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	edxApi "github.com/skinnykaen/robbo_student_personal_account.git/package/edxApi"
	models "github.com/skinnykaen/robbo_student_personal_account.git/package/models"
)

// MockDelegate is a mock of Delegate interface.
type MockDelegate struct {
	ctrl     *gomock.Controller
	recorder *MockDelegateMockRecorder
}

// MockDelegateMockRecorder is the mock recorder for MockDelegate.
type MockDelegateMockRecorder struct {
	mock *MockDelegate
}

// NewMockDelegate creates a new mock instance.
func NewMockDelegate(ctrl *gomock.Controller) *MockDelegate {
	mock := &MockDelegate{ctrl: ctrl}
	mock.recorder = &MockDelegateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelegate) EXPECT() *MockDelegateMockRecorder {
	return m.recorder
}

// CreateCourse mocks base method.
func (m *MockDelegate) CreateCourse(course *models.CourseHTTP, courseId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCourse", course, courseId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCourse indicates an expected call of CreateCourse.
func (mr *MockDelegateMockRecorder) CreateCourse(course, courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCourse", reflect.TypeOf((*MockDelegate)(nil).CreateCourse), course, courseId)
}

// DeleteCourse mocks base method.
func (m *MockDelegate) DeleteCourse(courseId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourse", courseId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourse indicates an expected call of DeleteCourse.
func (mr *MockDelegateMockRecorder) DeleteCourse(courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourse", reflect.TypeOf((*MockDelegate)(nil).DeleteCourse), courseId)
}

// GetAllPublicCourses mocks base method.
func (m *MockDelegate) GetAllPublicCourses(pageNumber int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPublicCourses", pageNumber)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPublicCourses indicates an expected call of GetAllPublicCourses.
func (mr *MockDelegateMockRecorder) GetAllPublicCourses(pageNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPublicCourses", reflect.TypeOf((*MockDelegate)(nil).GetAllPublicCourses), pageNumber)
}

// GetCourseContent mocks base method.
func (m *MockDelegate) GetCourseContent(courseId string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseContent", courseId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseContent indicates an expected call of GetCourseContent.
func (mr *MockDelegateMockRecorder) GetCourseContent(courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseContent", reflect.TypeOf((*MockDelegate)(nil).GetCourseContent), courseId)
}

// GetCoursesByUser mocks base method.
func (m *MockDelegate) GetCoursesByUser() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoursesByUser")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoursesByUser indicates an expected call of GetCoursesByUser.
func (mr *MockDelegateMockRecorder) GetCoursesByUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoursesByUser", reflect.TypeOf((*MockDelegate)(nil).GetCoursesByUser))
}

// GetEnrollments mocks base method.
func (m *MockDelegate) GetEnrollments(username string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnrollments", username)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnrollments indicates an expected call of GetEnrollments.
func (mr *MockDelegateMockRecorder) GetEnrollments(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnrollments", reflect.TypeOf((*MockDelegate)(nil).GetEnrollments), username)
}

// Login mocks base method.
func (m *MockDelegate) Login(email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockDelegateMockRecorder) Login(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockDelegate)(nil).Login), email, password)
}

// PostEnrollment mocks base method.
func (m *MockDelegate) PostEnrollment(postEnrollmentHTTP *models.PostEnrollmentHTTP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostEnrollment", postEnrollmentHTTP)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostEnrollment indicates an expected call of PostEnrollment.
func (mr *MockDelegateMockRecorder) PostEnrollment(postEnrollmentHTTP interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostEnrollment", reflect.TypeOf((*MockDelegate)(nil).PostEnrollment), postEnrollmentHTTP)
}

// PostUnenroll mocks base method.
func (m *MockDelegate) PostUnenroll(postUnenrollHTTP *models.PostEnrollmentHTTP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostUnenroll", postUnenrollHTTP)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostUnenroll indicates an expected call of PostUnenroll.
func (mr *MockDelegateMockRecorder) PostUnenroll(postUnenrollHTTP interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostUnenroll", reflect.TypeOf((*MockDelegate)(nil).PostUnenroll), postUnenrollHTTP)
}

// Registration mocks base method.
func (m *MockDelegate) Registration(userForm *edxApi.RegistrationForm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registration", userForm)
	ret0, _ := ret[0].(error)
	return ret0
}

// Registration indicates an expected call of Registration.
func (mr *MockDelegateMockRecorder) Registration(userForm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registration", reflect.TypeOf((*MockDelegate)(nil).Registration), userForm)
}

// UpdateCourse mocks base method.
func (m *MockDelegate) UpdateCourse(course *models.CourseHTTP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourse", course)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCourse indicates an expected call of UpdateCourse.
func (mr *MockDelegateMockRecorder) UpdateCourse(course interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourse", reflect.TypeOf((*MockDelegate)(nil).UpdateCourse), course)
}
